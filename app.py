import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go

# T√≠tulo do dashboard
st.title("üìà Dashboard de A√ß√µes")

# Entrada do usu√°rio
ticker_input = st.text_input("Digite o c√≥digo da a√ß√£o (ex: AAPL, TSLA, PETR4.SA):")

# Bot√µes de per√≠odo para hist√≥rico de pre√ßos (agora no estilo do Google Finance)
periodos = {"1D": "1d", "5D": "5d", "1M": "1mo", "6M": "6mo", "YTD": "ytd", "1Y": "1y", "5Y": "5y", "Max": "max"}

# Criando os bot√µes de per√≠odo como texto clic√°vel
col1, col2, col3, col4, col5, col6, col7, col8 = st.columns(8)
botoes = [col1, col2, col3, col4, col5, col6, col7, col8]
periodo_selecionado = "6M"  # Padr√£o inicial

for i, (label, value) in enumerate(periodos.items()):
    if botoes[i].button(label, key=f"btn_{label}"):
        periodo_selecionado = label  # Atualiza o per√≠odo quando um bot√£o √© clicado

if ticker_input:
    ticker = ticker_input
    if not ticker.endswith(".SA") and len(ticker) == 5:
        ticker += ".SA"

    # Buscar dados da a√ß√£o
    stock = yf.Ticker(ticker)
    dados = stock.history(period=periodos[periodo_selecionado])

    # Buscar pre√ßo atual e varia√ß√£o percentual
    preco_atual = dados["Close"].iloc[-1]
    preco_anterior = dados["Close"].iloc[0]
    variacao = preco_atual - preco_anterior
    porcentagem = (variacao / preco_anterior) * 100
    cor_variacao = "green" if variacao > 0 else "red"
    simbolo_variacao = "üîº" if variacao > 0 else "üîª"

    # Exibir valor atual e varia√ß√£o percentual no topo
    st.markdown(f"""
    <h2 style='color:{cor_variacao};'>
        {preco_atual:.2f} BRL {simbolo_variacao} {variacao:.2f} ({porcentagem:.2f}%) nos √∫ltimos {periodo_selecionado}
    </h2>
    """, unsafe_allow_html=True)

    # üìå Gr√°fico de Pre√ßos - Linha Azul Royal, com Suaviza√ß√£o
    st.subheader(f"üìà Hist√≥rico de Pre√ßos - {ticker}")
    fig_price = go.Figure()

    fig_price.add_trace(go.Scatter(
        x=dados.index, 
        y=dados["Close"], 
        mode='lines',
        line=dict(color='#3454b4', width=2),  # Azul royal claro, mais fino e elegante
        fill='tozeroy',
        fillcolor='rgba(52, 84, 180, 0.2)'  # Transpar√™ncia suave no fundo
    ))

    # Ajuste na escala para n√£o encostar no zero
    min_preco = dados["Close"].min()
    max_preco = dados["Close"].max()
    margem = (max_preco - min_preco) * 0.1  # Adiciona uma margem de 10%

    fig_price.update_layout(
        template="plotly_dark",
        title=f"Evolu√ß√£o do Pre√ßo - {periodo_selecionado} ({ticker})",
        xaxis_title="Data",
        yaxis_title="Pre√ßo (R$)",
        margin=dict(l=40, r=40, t=40, b=40),
        xaxis=dict(showgrid=False),
        yaxis=dict(showgrid=True, gridcolor="rgba(255, 255, 255, 0.2)", range=[min_preco - margem, max_preco + margem])  # Ajuste da propor√ß√£o correta
    )

    st.plotly_chart(fig_price)
